{"version":3,"sources":["Fact.js","App.js","serviceWorker.js","index.js"],"names":["Fact","props","className","numberToDisplay","topicToDisplay","factToDisplay","App","getTrivia","triviaNumber","document","getElementById","value","console","log","setState","topic","number","fetch","then","resp","json","data","fact","text","state","getMath","mathNumber","getDate","dateValue","getYear","yearValue","this","type","placeholder","id","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bd9b20c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Fact.css\";\n\nconst Fact = (props) => {\n  return (\n      <article>\n      <div>\n        <p className='f5 f3-ns lh-copy measure georgia'>\n   \n        {props.numberToDisplay + ' '} \n        {props.topicToDisplay + ' '} \n        </p>\n      <div >\n      <p className='f6 f5-ns lh-copy measure i pl4 bl bw1 b--gold mb4'>{props.factToDisplay}</p>\n      </div>\n      </div>\n    </article>\n  );\n}\nexport default Fact;\n","import React, { Component } from \"react\";\n\nimport Fact from \"./Fact\";\nimport \"tachyons\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      topic: \"\",\n      number: \"\",\n      fact: \"\",\n    };\n  }\n  getTrivia = () => {\n    let triviaNumber = document.getElementById(\"triviaInput\").value;\n    console.log(triviaNumber);\n    this.setState({ topic: \"trivia fact\" });\n    this.setState({ number: document.getElementById(\"triviaInput\").value });\n    fetch(`http://numbersapi.com/${triviaNumber}/trivia?json`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        return (\n          this.setState({ fact: data.text }),\n          console.log(this.state.topic, this.state.number, this.state.fact)\n        );\n      });\n  };\n\n  getMath = () => {\n    let mathNumber = document.getElementById(\"mathInput\").value;\n    console.log(mathNumber);\n    this.setState({ topic: \"math fact\" });\n    this.setState({ number: document.getElementById(\"mathInput\").value });\n    fetch(`http://numbersapi.com/${mathNumber}/math?json`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        return (\n          this.setState({ fact: data.text }),\n          console.log(this.state.topic, this.state.number, this.state.fact)\n        );\n      });\n  };\n\n  getDate = () => {\n    let dateValue = document.getElementById(\"dateInput\").value;\n    console.log(dateValue);\n    this.setState({ topic: \"date fact\" });\n    this.setState({ number: document.getElementById(\"dateInput\").value });\n    fetch(`http://numbersapi.com/${dateValue}/date?json`)\n      .then(resp => resp.json())\n      .then(data => {return (\n          this.setState({ fact: data.text }),\n          console.log(this.state.topic, this.state.number, this.state.fact)\n        );\n      });\n    };\n    getYear =()=>{\n      let yearValue = document.getElementById('yearInput').value;\n      console.log(yearValue);\n    this.setState({topic: 'year fact'});\n    this.setState({number: document.getElementById('yearInput')});\n    fetch(`http://numbersapi.com/${yearValue}/year?json`)\n    .then(resp=>resp.json())\n    .then(data=>{ return (\n      this.setState({fact: data.text}),\n      console.log(this.state.topic, this.state.number, this.state.fact)\n    );\n  }\n    );\n    };\n\n  render() {\n    return (\n<article>\n<header className='bg-gold sans-serif'>\n      <div className='mw9 center pa4 pt5-ns ph7-l'>\n        <h3 className='f2 f1-m f-headline-l measure-narrow lh-title mv0'>\n        <span className='bg-black-90 lh-copy white pa1 tracked-tight'>Bring tales, facts and stories to life based on your numbers.</span></h3>\n        <h4 className='f3 fw1 georgia i'>Just type trivia, math number, date or year, and see metrics.</h4>\n        <h5 className='f6 ttu tracked black-80'>By Aneta Stojanowska</h5>\n        </div>\n </header>\n <div className='pa4 ph7-l georgia mw9-l center'>\n        <Fact\n          topicToDisplay={this.state.topic}\n          numberToDisplay={this.state.number}\n          factToDisplay={this.state.fact}\n        />\n        <h3  className=\"f3 br2 b--black-20\">\n          Trivia\n          <input\n           \n            type=\"number\" className='w5 mh4'\n            placeholder=\"enter number\"\n            id=\"triviaInput\"\n          />\n          <p onClick={this.getTrivia}>Go</p>\n        </h3>\n        <h3 >\n          Math\n          <input className=\"f3 br2 b--black-20\" type=\"number\" placeholder=\"enter number\" id=\"mathInput\" />\n          <p className='f5 f4-ns lh-copy measure' onClick={this.getMath}>Go</p>\n        </h3>\n        <h3>\n          Date\n          <input   className=\"f3 br2 b--black-20\" type=\"text\" placeholder=\"Format MM/DD\" id=\"dateInput\" />\n          <p onClick={this.getDate}>Go</p>\n        </h3>\n        <h3>\n          Year\n          <input className=\"f3 br2 b--black-20\" type='year' placeholder='enter year' id='yearInput' />\n          <p onClick={this.getYear}>Go</p>\n        </h3>\n        <p className='f5 f4-ns lh-copy measure'>\n        Metrics are measures of quantitative assessment commonly used for comparing, and tracking performance or production.\n        </p>\n        </div>\n      </article>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}